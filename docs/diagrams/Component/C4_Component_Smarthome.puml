@startuml C4_Component_Smarthome

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Диаграмма контейнеров (3-й уровень)

skinparam nodesep 80
skinparam ranksep 150

LAYOUT_WITH_LEGEND()


Person(user, "User", "Пользователь(-и) системы")


System_Boundary(smartHome, "Smart Home System", $link="https://github.com/plantuml-stdlib/C4-PlantUML") {
    
    ' Apps
    Container(app, "App (mobile\SPA)",  "", "Веб-приложение\Мобильное приложение",)
    ' Gateways
    Container(api_gateway, "API Gateway / BFF", "Kong", "Точка входа для клиентов")


    'Services
    ' Container(device_service, "Device Service", "Java + PostgreSQL", "Cервис для управления оборудованием")
    ' Container(heating_service, "Heating Service", "Java + PostgreSQL", "Cервис для управления отоплением")
    ' Container(temperature_service, "Temperature Service", "Java + PostgreSQL", "Cервис для управления температурой")
    ' Container(user_service, "User Service", "Java + PostgreSQL", "Cервис для управление пользователем")
    ' Container(admin_service, "Admin Service", "Java + PostgreSQL", "Cервис для управление администратором ")
    ' Container(light_service, "Light Service", "Java + PostgreSQL", "Cервис для управления светом")
    ' Container(gate_service, "Gate Service", "Java + PostgreSQL", "Cервис для управления воротами")
    ' Container(video_service, "Video Service", "Java + TimescaleDB", "Cервис для видеостриминга")
    ' Container(monitoring_service, "Monitoring Service", "Prometheus + Grafana + ELK", "Cервис для мониторинга")
    ' Container(auth_service, "Auth Service", "Keycloak + OAuth2.0", "Cервис для авторизации и аутентификации, выдача токенов")
    ' Container(notification_service, "Notification Service","Java + PostgreSQL",  "Cервис для оповещений")


    System_Boundary(device_service, "Device Service") {
        
        Container(device_controller, "Controller", "Java", "")

        Container(device_auth_controller, "AuthController", "Java", "Контроллер авторизации и аутентификации")
        Container(device_register_controller, "Device registration Controller", "Java", "Контроллер регистрации и удаления оборудования")
        Container(device_settings_controller, "Device settings Controller", "Java", "Контроллер настройки")
        Container(device_settings_controller, "Device monitroing Controller", "Java", "Мониторинг")
        Container(device_settings_controller, "Device monitroing Controller", "Java", "Мониторинг")



    }


    System_Boundary(heating_service, "Heating Service")
    System_Boundary(temperature_service, "Temperature Service")
    System_Boundary(user_service, "User Service")
    System_Boundary(admin_service, "Admin Service")
    System_Boundary(light_service, "Light Service")
    System_Boundary(gate_service, "Gate Service")
    System_Boundary(video_service, "Video Service")
    System_Boundary(monitoring_service, "Monitoring Service")
    System_Boundary(auth_service, "Auth Service")
    System_Boundary(notification_service, "Notification Service")


    Container(kafka_service, "Kafka", "Event Streaming", "Брокер для обмена событиями между микросервисами")

    SystemDb(device_service_db, "Device Service DB",  "PostgreSQL", "БД для оборудования")
    SystemDb(heating_service_db, "Heating Service DB", "PostgreSQL", "БД для отопления")
    SystemDb(temperature_service_db, "Temperature Service DB", "PostgreSQL", "БД для температуры")
    SystemDb(user_service_db, "User\Admin Service DB", "PostgreSQL" , "БД для пользователей")
    SystemDb(light_service_db, "Light Service DB", "PostgreSQL",  "БД для света")
    SystemDb(gate_service_db, "Gate Service DB", "PostgreSQL", "БД для дверей и ворот" )
    SystemDb(video_service_db, "Video Service DB", "TimescaleDB", "БД для видеостриминга")
    SystemDb(notification_service_db, "Notification Service DB", "PostgreSQL", "БД для оповещений")

}



Rel(user, app, "")
Rel(app, api_gateway, "")



' API Gateway x Services
Rel(api_gateway, device_service, "REST API")
Rel(api_gateway, heating_service, "REST API")
Rel(api_gateway, temperature_service, "REST API")
Rel(api_gateway, user_service, "REST API")
Rel(api_gateway, admin_service, "REST API")
Rel(api_gateway, light_service, "REST API")
Rel(api_gateway, gate_service, "REST API")
Rel(api_gateway, video_service, "REST API")
Rel(api_gateway, monitoring_service, "REST API")
Rel(api_gateway, auth_service, "REST API")
Rel(api_gateway, notification_service, "REST API")



' Kafka
Rel(device_service, kafka_service, "Публикует события по оборудованию")
Rel(heating_service, kafka_service, "Публикует события по отоплению")
Rel(temperature_service, kafka_service, "Публикует события по температуре")
Rel(light_service, kafka_service, "Публикует события по свету")
Rel(gate_service, kafka_service, "Публикует события по воротам и дверям")
Rel(monitoring_service, kafka_service, "Подписывается на события")
Rel(notification_service, kafka_service, "Подписывается на события")
Rel(kafka_service, notification_service, "Публикует события")


' Services x DB
Rel(device_service, device_service_db, "Чтение\Запись")
Rel(heating_service, heating_service_db, "Чтение\Запись")
Rel(temperature_service, temperature_service_db, "Чтение\Запись")
Rel(light_service, light_service_db, "Чтение\Запись")
Rel(gate_service, gate_service_db,"Чтение\Запись")
Rel(video_service, video_service_db, "Чтение\Запись")
Rel(notification_service, notification_service_db, "Чтение\Запись")
Rel(user_service, user_service_db, "Чтение\Запись")
Rel(admin_service, user_service_db, "Чтение\Запись")
Rel(auth_service, user_service_db, "Чтение\Запись")


SHOW_LEGEND()

@enduml